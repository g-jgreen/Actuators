{
  "name": "coapActuator",
  "version": "0.0.7",
  "type": "actuator",
  "script": "/*\nif you want to test:\nserver = coap://coap.me\npath = large-update\n*/\nvar server = options.requiredProperties.server;\nvar payload = JSON.parse(options.requiredProperties.payload);\nvar path = options.requiredProperties.path;\nvar parsed_url = url.parse(server);\nvar method = options.requiredProperties.method || 'put';\n\nif(server !== undefined && path !== undefined) {\n    try{\n         var coapMsg = {\n            method: method,\n            hostname: parsed_url.hostname,\n            pathname: path,\n            confirmable: true,\n            port: parsed_url.port\n        };\n        var req = coap.request(coapMsg);\n        if(payload !== undefined)\n            req.write(new Buffer(JSON.stringify(payload)));\n        req.on('response', function(res) {\n            console.log(res);\n            if (res.code === \"2.01\" || res.code === \"2.02\" ||  res.code === \"2.04\" || res.code === \"2.05\") {\n              console.log(\"OK:\" + res.code);\n              send();\n            } else {\n                console.log(\"FAIL:\" + res.code);\n                send(new Error(\"failed with code: \" +res.code));\n            }\n            \n        });\n        req.end();\n     } catch(err){\n         console.log(err.stack)\n         send(new Error(err));\n     }\n} else {\n    send(new Error(\"missing input arguments\"));\n}\n",
  "metadata": {
    "author": "",
    "category": "CoAP",
    "description": "COAP actuator",
    "iconURL": "https://raw.githubusercontent.com/waylayio/documentation/master/icons/coap.png",
    "supportedStates": [],
    "requiredProperties": [
      "server",
      "payload",
      "path",
      "method"
    ],
    "requiredRawData": []
  }
}
