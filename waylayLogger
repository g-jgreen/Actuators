{
    "name": "waylayLogger",
    "version": "1.0.1",
    "type": "actuator",
    "script": "var thing  = options.requiredProperties.item || options.node.RESOURCE || options.node.NAME;\n\nvar msg = \"waylay message\";\nif(options.requiredProperties.message)\n    msg = waylayUtil.evaluateData(options, options.requiredProperties.message);\n\nvar data = {\n    taskId: options.task.TASK_ID,\n    time: new Date(),\n    message : msg\n}\n\nif(thing){\n  var url = \"https://data.waylay.io/resources/\"+ thing;\n  var options = {\n    url: url,\n    json: data\n  };\n  var callback = function(error, response, body) {\n    if (!error && response.statusCode == 200) {\n      console.log(body);\n      send();\n    }else{\n      send(new Error(\"Calling dweet failed: \" + error + \" \" + body));\n    }\n  };\n  request.post(options, callback);\n}else{\n  send(new Error(\"Missing properties\"));\n}",
    "metadata": {
        "author": "",
        "category": "Waylay",
        "description": "waylayLogger will post the message with item as the resource identifier for the waylay broker.\nThis actuator is not using API keys, which means that the data access is global.\n\nActuator will post a message using the item as the identifier.\nInput parameters are:\n<ul>\n<li>item, if not provided it will take the resource or node name</li>\n<li>message, which will be pre-processed with  waylayUtil.evaluateData</li>\n</ul>\n\nData payload:\n<ul>\n<li>task ID</li>\n<li>time, in UTC milis</li>\n<li>message, which will be pre-processed with  waylayUtil.evaluateData</li>\n</ul>\n\nFor more info, please check the documentation on waylay broker and cache.\n\n\n",
        "documentationURL": "",
        "iconURL": "https://raw.githubusercontent.com/waylayio/documentation/master/icons/waylay.png",
        "supportedStates": [],
        "requiredProperties": [
            "item",
            "message"
        ],
        "requiredRawData": []
    }
}
