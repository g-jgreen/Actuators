{"name":"myfoxIOEnablePanicMode","version":"0.0.2","type":"actuator","script":"var props = options.requiredProperties;\nvar clientId = options.globalSettings.DASHBOARD_KEY;\nvar clientSecret = options.globalSettings.DASHBOARD_SECRET;\nvar dashboardDomain = options.globalSettings.DASHBOARD_DOMAIN;\n\nvar profile = props.profile || waylayUtil.getResource(options);\nvar panicMode = props.panicMode || 'silent'\nvar apiRoot = \"https://api.myfox.io/v3\"\nvar siteId = options.requiredProperties.siteId;\n\nvar getToken = function(callback) {\n    var options = {\n        url: \"https://\"+dashboardDomain+\"/api/token/myfox.io/\" + profile,\n        auth: {\n            user: clientId,\n            password: clientSecret\n        }\n    };\n    try {\n        request(options, function(error, response, body) {\n            if (!error && response.statusCode == 200) {\n                var bodyJson = JSON.parse(body);\n                callback(null, bodyJson);\n            } else {\n                callback(new Error(\"Calling myFox.io api failed: \" + error + \" \" + body + options.url));\n            }   \n        });\n    } catch(err){\n        callback(new Error(\"Calling myFox.io api failed: \" + err));\n    }\n}\n\nfunction setPanicState() {\n     return requestP({\n        url: apiRoot + '/site/' + siteId + '/panic',\n        method: 'POST',\n        auth: auth,\n        accept: 'application/json',\n        'content-type': 'application/json',\n        json: {\n        \t\"type\": panicMode\n        }\n    });\n}\n\nfunction requestP(options) {\n  var method = options.method || \"GET\";\n  console.log(method + ' -> ' + options.url);\n  return new Promise(function(resolve, reject){\n    var start = new Date().getTime();\n    console.log(method + '  ' + options.url);\n    request(options, function(err, response, body) {\n      var end = new Date().getTime();\n      var status = '-';\n      if(response) {\n        status = response.statusCode\n      }\n      if(err){\n        reject(err);\n      }else{\n        resolve({\n          response: response,\n          body: body\n        });\n      }\n    });\n  });\n}\n\nfunction setTokens(token) {\n    if (token.accessToken !== undefined) {\n        auth = {'bearer': token.accessToken}\n        setPanicState().then(function (res) {\n            send()\n       }).catch(function (err) {\n           send(new Error('Problem enabling panic state for myFox.io.'))\n       })\n    } else {\n        send(new Error('Token for profile ' + profile + ' is not valid.'));\n    }\n}\n\nif(siteId !== undefined && clientId !== undefined && clientSecret !== undefined && dashboardDomain !== undefined){\n    getToken(function(err, token) {\n        if (err !== undefined) {\n           setTokens(token);\n        } else {\n           send(err);\n        }\n    });\n} else {\n    send(new Error(\"Missing properties\"));\n}\n","metadata":{"author":"","category":"Experimental","description":"myFoxioEnablePanicMode\n\nEnables the MyFox.io panic mode\n\npanicmode = [silent, alarm]","iconURL":"https://dummyimage.com/160&text=myfoxIOEnablePanicMode","supportedStates":[],"requiredProperties":["profile","siteId","panicMode"],"requiredRawData":[]}}
