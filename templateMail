{
  "name": "templateMail",
  "version": "0.0.4",
  "type": "actuator",
  "script": "/*\ne-mail input can as well be the sensor that retuns e-mail in rawData in format {e-mail : \"example@gmail.com\"}.\nIn that case you need to put in options.requiredProperties.to a sensor name\n*/\nvar e_mail;\ntry{\n    e_mail= waylayUtil.evaluateData(options, options.requiredProperties.to);    \n} catch(err){\n    console.log(err);\n}\n\nvar TO = e_mail || options.requiredProperties.to;\n\nvar sendMail = function(chunks) {\n    var message = {\n        key: options.globalSettings.MANDRILL_KEY,\n            message: {\n                html: waylayUtil.template(options, options.requiredProperties.message),\n                subject:  waylayUtil.template(options, options.requiredProperties.subject),\n                from_email: options.requiredProperties.from,\n                from_name: options.requiredProperties.from,\n                to: [\n                    {\n                        email: TO,\n                        name: TO,\n                        type: \"to\"\n                    }\n                ],\n                headers: {\n                    \"Reply-To\": options.requiredProperties.from\n                }\n            }\n        };\n         var requestOptions = {\n          url: 'https://mandrillapp.com/api/1.0/messages/send.json\"',\n          json: message\n        };\n        if(chunks){\n            var data = new Buffer.concat(chunks);\n            console.log(\"add attachment\")\n            message.message.attachments = [\n                {\n                    name : \"Attachment.pdf\",\n                    type : \"application/pdf\",\n                    content: data.toString(\"base64\")\n                }\n            ]\n        }\n        request.post(requestOptions, function (error, response, body) {\n          if (!error && response.statusCode == 200) {\n            console.log(body);\n            send();\n          }else{\n              send(new Error(JSON.stringify(response)));\n          }\n    });\n}\n\nif(options.globalSettings.MANDRILL_KEY === undefined || options.requiredProperties.message === undefined ||\n    options.requiredProperties.subject === undefined || options.requiredProperties.from === undefined || \n    TO === undefined){\n        send(new Error(\"Error missing properties\"));\n    }\nelse {\n    if(waylayUtil.validateEmail(TO) && waylayUtil.validateEmail(options.requiredProperties.from) ){\n        var pdf = options.requiredProperties.pdfURL;\n        if(pdf){\n            request(pdf)\n            .on('response', function(response) {\n                var chunks = [];\n                response.on('data', function(chunk){\n                    chunks.push(chunk);\n                });\n                response.on('end', function(){\n                     sendMail(chunks);\n                });\n                response.on('error', function(){\n                     send(new Error(\"error\"));\n                });\n            });\n        }else{\n            sendMail();\n        }\n             \n    } else{\n        var message = \"Emails are not valid: to=\" + TO + \", from=\" + options.requiredProperties.from;\n        console.log(message);\n        send(new Error(message));\n    }\n}\n\n      ",
  "metadata": {
    "author": "",
    "category": "Mail",
    "description": "Mail actuator.\nMessage and subject are parsed using waylayUtil.template function.\n\nInput parameters are:\n<ul>\n<li>from</li>\n<li>to</li>\n<li>message</li>\n<li>subject</li>\n</ul>\n\nActuator requires <strong>MANDRILL_KEY</strong> in the global settings\n",
    "documentationURL": "",
    "iconURL": "https://members.marshallcenter.org/system/files/imagecache/resource_thumbnail/Mail.png",
    "supportedStates": [],
    "requiredProperties": [
      "from",
      "to",
      "message",
      "subject",
      "pdfURL"
    ],
    "requiredRawData": []
  }
}
