{
  "name": "nestSetTemperature",
  "version": "0.0.2",
  "script": "var props = options.requiredProperties;\nvar clientId = options.globalSettings.DASHBOARD_KEY;\nvar clientSecret = options.globalSettings.DASHBOARD_SECRET;\nvar dashboardDomain = options.globalSettings.DASHBOARD_DOMAIN;\n\nvar profile = props.profile || waylayUtil.getResource(options);\nvar newTemperature = props.newTemperature || 20\nvar apiRoot = \"https://developer-api.nest.com\"\nvar deviceId = options.requiredProperties.deviceId;\n\nvar getToken = function(callback) {\n    var options = {\n        url: \"https://\"+dashboardDomain+\"/api/token/nest/\" + profile,\n        auth: {\n            user: clientId,\n            password: clientSecret\n        }\n    };\n    try {\n        request(options, function(error, response, body) {\n            if (!error && response.statusCode == 200) {\n                var bodyJson = JSON.parse(body);\n                callback(null, bodyJson);\n            } else {\n                callback(new Error(\"Calling nest api failed: \" + error + \" \" + body + options.url));\n            }   \n        });\n    } catch(err){\n        callback(new Error(\"Calling nest api failed: \" + err));\n    }\n}\n\nfunction setTemperature(redirectUri) {\n     return requestP({\n        url: (redirectUri) ? redirectUri : apiRoot + '/devices/thermostats/' + deviceId,\n        method: 'PUT',\n        auth: auth,\n        'Content-Type': 'application/json',\n        json: {\n        \t\"target_temperature_c\" : parseInt(newTemperature)\n        }\n    });\n}\n\nfunction requestP(options) {\n  var method = options.method || \"GET\";\n  console.log(method + ' -> ' + options.url);\n  return new Promise(function(resolve, reject){\n    var start = new Date().getTime();\n    console.log(method + '  ' + options.url);\n    request(options, function(err, response, body) {\n      var end = new Date().getTime();\n      var status = '-';\n      if(response) {\n        status = response.statusCode\n      }\n      console.log(response)\n      if(err){\n        reject(err);\n      }else if(response.statusCode == 307){\n          var redirectObj = {\n              redirectUri:response.headers.location\n          }\n          reject(redirectObj);\n      }else{\n        resolve({\n          response: response,\n          body: body\n        });\n      }\n    });\n  });\n}\n\nfunction setTokens(token) {\n    if (token.accessToken !== undefined) {\n        auth = {'bearer': token.accessToken}\n        setTemperature().then(function (res) {\n            send()\n       }).catch(function (err) {\n           if(err.redirectUri){\n            console.log(\"retrying with redirectUri\")\n            setTemperature(err.redirectUri).then(function(res){\n                send()\n            }).catch(function(err){\n                send(new Error('Problem setting temperature for Nest with redirect.'))\n            })\n           }\n           else{\n            send(new Error('Problem setting temperature for Nest.'))   \n           }\n       })\n    } else {\n        send(new Error('Token for profile ' + profile + ' is not valid.'));\n    }\n}\n\nif(deviceId !== undefined && clientId !== undefined && clientSecret !== undefined && dashboardDomain !== undefined){\n    getToken(function(err, token) {\n        if (err !== undefined) {\n           setTokens(token);\n        } else {\n           send(err);\n        }\n    });\n} else {\n    send(new Error(\"Missing properties\"));\n}\n",
  "metadata": {
    "author": "Lorenzo",
    "category": "Nest",
    "description": "Test actuator",
    "iconURL": "http://file.answcdn.com/answ-cld/image/upload/v1/tk/brand_image/c7d3fadd/c71c29fef0dd6c56a9b2777906bcf3245960c403.png",
    "supportedStates": [],
    "requiredProperties": [
      "profile",
      "deviceId",
      "newTemperature"
    ],
    "requiredRawData": []
  }
}
