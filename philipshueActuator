{
    "name": "philipshueActuator",
    "version": "0.2.1",
    "type": "actuator",
    "script": "'use strict'\nconst props = options.requiredProperties\n\nconst clientId = options.globalSettings.DASHBOARD_KEY\nconst clientSecret = options.globalSettings.DASHBOARD_SECRET\nconst dashboardDomain = options.globalSettings.DASHBOARD_DOMAIN\n\nconst id = props.id\nconst bridgeId = props.bridgeId\nconst on = props.on || \"false\"\nlet hue = props.hue || 0\nlet sat = props.sat || 0\nlet bri = props.bri || 254 // no idea why but docs mention max 254\nlet color = props.color\nconst profile = props.profile || waylayUtil.getResource(options)\n\n\n\n/**\n * Converts an RGB color value to HSL. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and l in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSL representation\n */\nfunction rgbToHsl(r, g, b){\n  r /= 255, g /= 255, b /= 255;\n  var max = Math.max(r, g, b), min = Math.min(r, g, b);\n  var h, s, l = (max + min) / 2;\n\n  if(max == min){\n    h = s = 0; // achromatic\n  }else{\n    var d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    switch(max){\n      case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n      case g: h = (b - r) / d + 2; break;\n      case b: h = (r - g) / d + 4; break;\n    }\n    h /= 6;\n  }\n\n  return [h, s, l];\n}\n\n/**\n * Converts hex color to rgb values (also handles possible # prefix)\n *\n * eg: FF0000 => [255, 0, 0]\n * eg: #99AABB => [153, 170, 187]\n *\n * @param hex\n */\nfunction hexToRgb(hex){\n  if(hex.startsWith(\"#\"))\n    hex = hex.substr(1)\n  const r = parseInt(hex.substring(0, 2), 16)\n  const g = parseInt(hex.substring(2, 4), 16)\n  const b = parseInt(hex.substring(4, 6), 16)\n  return [r,g,b]\n}\n\n\nvar getToken = function(callback){\n  var options = {\n    url: \"https://\"+dashboardDomain+\"/api/token/philipshue/\" + profile,\n    auth: {\n      user: clientId,\n      password: clientSecret\n    }\n  };\n\n  try {\n    request(options, function(error, response, body) {\n      if (!error && response.statusCode == 200) {\n        var bodyJson = JSON.parse(body);\n        console.log(bodyJson);\n        callback(null, bodyJson);\n      }else{\n        callback(new Error(\"Calling dashboard api failed: \" + error + \" \" + body + options.url));\n      }\n    });\n  } catch(err){\n    callback(new Error(\"Calling dashboard api failed: \" + err));\n  }\n}\n\nfunction getBool(val) {\n  if(val === undefined){\n    return false\n  }\n  return !!JSON.parse(String(val).toLowerCase());\n}\n\n\nvar setState = function(token, on, hue, sat, bri) {\n  // http://www.developers.meethue.com/documentation/remote-light-control-endpoints#11_5_set_light_state\n  // http://www.developers.meethue.com/documentation/lights-api#16_set_light_state\n\n  var json = {\n    on: getBool(on),\n    hue: parseInt(hue),\n    sat: parseInt(sat),\n    bri: parseInt(bri)\n  }\n\n  var url = `https://api.meethue.com/v1/bridges/${bridgeId}/lights/${id}/state`\n\n  console.log(url)\n  console.log(json)\n  request.put(url, {\n    auth: {\n      'bearer': token\n    },\n    json: json\n  }, function(err, response, body) {\n    if (!err && response.statusCode == 200) {\n      console.log(\"resp = \\n\" + JSON.stringify(body, null, 2))\n      send();\n    } else{\n      console.log(body)\n      send(new Error(response.statusCode));\n    }\n  });\n};\n\nif(clientId !== undefined && clientSecret !== undefined && dashboardDomain !== undefined && id !== undefined && profile !== undefined){\n\n  if(color !== undefined){\n    console.log('converting color to hue/sat/bri')\n\n    if(color.toLowerCase() === 'red')\n      color = 'FF0000'\n    if(color.toLowerCase() === 'blue')\n      color = '0000FF'\n    if(color.toLowerCase() === 'green')\n      color = '00FF00'\n\n    const rgb = hexToRgb(color)\n\n    const hsl = rgbToHsl(rgb[0], rgb[1], rgb[2])\n\n    hue = hsl[0] * 256 * 256 // for philips hue the hue goes 0 -> 65535\n    sat = hsl[1] * 256\n    bri = hsl[2] * 256\n  }\n\n  getToken((err, token) => {\n    if(err) return send(err)\n    setState(token.accessToken, on, hue, sat, bri)\n  });\n}else{\n  send(new Error(\"Missing properties\"));\n}\n\n",
    "metadata": {
        "author": "",
        "category": "Dashboard",
        "description": "Philips Hue actuator\nyou can change the color, turn the lamp on or off\n\nInput arguments are:\n<ul>\n<li>id</li>\n<li>bridgeId</li>\n<li>on: true or false</li>\n</ul>\n\nand\n\n<ul>\n<li>color: #RRGGBB</li>\n</ul>\n\nor \n\n<ul>\n<li>hue: 0 - 65535 </li>\n<li>bri: 1 - 254</li>\n<li>sat: 0 - 254</li>\n</ul>\n",
        "documentationURL": "http://www.developers.meethue.com/documentation/lights-api#16_set_light_state",
        "iconURL": "https://dummyimage.com/160&text=philipshueActuator",
        "supportedStates": [],
        "requiredProperties": ["profile", "id", "bridgeId", "hue", "bri", "sat", "color", "on"],
        "requiredRawData": []
    }
}
