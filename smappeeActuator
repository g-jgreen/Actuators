{
  "name": "smappeeActuator",
  "version": "0.0.1",
  "type": "actuator",
  "script": "var props = options.requiredProperties;\n\nvar clientId = options.globalSettings.DASHBOARD_KEY;\nvar clientSecret = options.globalSettings.DASHBOARD_SECRET;\nvar dashboardDomain = options.globalSettings.DASHBOARD_DOMAIN;\n\nvar tokenFromCache = waylayUtil.getCacheData(options, \"token\");\n\nvar serviceLocationId = props.serviceLocationId\nvar actuatorId = props.actuatorId\nvar action = props.action\nvar profile = props.profile || waylayUtil.getResource(options);\n\nvar baseUrl = \"https://app1pub.smappee.net/dev/v1\";\n\nvar getToken = function(callback){\n  var url = \"https://\"+dashboardDomain+\"/api/token/smappee/\" + profile\n  var options = {\n    url: url,\n    auth: {\n      user: clientId,\n      password: clientSecret\n    }\n  };\n\n  try {\n    request(options, function(error, response, body) {\n      if (!error && response.statusCode == 200) {\n        var bodyJson = JSON.parse(body);\n        callback(null, bodyJson);\n      }else{\n        callback(new Error(\"Calling dashboard api failed: \" + error + \" \" + body + options.url));\n      }\n    });\n  } catch(err){\n    callback(new Error(\"Calling dashboard api failed: \" + err));\n  }\n}\n\n\nvar setState = function(token, reqData, callback) {\n  var url = baseUrl + \"/servicelocation/\" + serviceLocationId + \"/actuator/\" + actuatorId + \"/\" + action;\n  console.log(url, reqData)\n  request.post(url, {\n    auth: {\n      bearer: token\n    },\n    json: reqData\n  }, function(err, response, body) {\n    if (!err && response.statusCode == 200) {\n      console.log(url, body)\n      callback(null, body);\n    } else{\n      callback(new Error(url + \" \" + response.statusCode + \" \" + body));\n    }\n  });\n};\n\nvar setDeviceData = function(token, params, callback){\n  if(token.accessToken !== undefined){\n    setState(token.accessToken, reqData, function(err, data){\n      if(err) return callback(err);\n      callback(null, data);\n    });\n  } else{\n    callback(new Error(\"Token for profile \"+ profile + \" not valid\"));\n  }\n}\n\nfunction doSend(reqData){\n  getToken(function(err, token){\n    if(err){\n      //send(err);\n      //try with the old token\n      if(tokenFromCache !== undefined){\n        console.log(\"try with an old token, since the request to the dashboard failed\");\n        setDeviceData({accessToken: tokenFromCache}, reqData, function(err, data){\n          if(err) return send(err);\n          send(null, data);\n        });\n      }else {\n        send(new Error(err));\n      }\n    }else{\n      setDeviceData(token, reqData, function(err, data){\n        if(err) return send(err);\n        send(null, {result: 'OK'});\n      });\n    }\n  });\n}\n\nif(\n  clientId !== undefined &&\n  clientSecret !== undefined &&\n  dashboardDomain !== undefined &&\n  profile !== undefined &&\n  action !== undefined &&\n  actuatorId !== undefined &&\n  serviceLocationId !== undefined\n){\n\n  // can also be this, but won't use it for now\n  // {\"duration\": [DURATION]}\n  var reqData = {}\n\n  doSend(reqData)\n\n}else{\n  send(new Error(\"Missing properties\"));\n}\n",
  "metadata": {
    "author": "Francis",
    "category": "Dashboard",
    "description": "<h1>Smappee actuator</h1>\n\nParameters\n<ul>\n<li>actuatorId: actuator id</li>\n<li>serviceLocationId: service location id</li>\n<li>action: 'on' or 'off'</li>\n<li>profile: dashboard login of user that has smappee connected</li>\n</ul>\n\nMore info at https://smappee.atlassian.net/wiki/display/DEVAPI/API+Methods",
    "iconURL": "https://static.waylay.io/plugs/icons/smappee.png",
    "supportedStates": [],
    "requiredProperties": [
      "serviceLocationId",
      "actuatorId",
      "action",
      "profile"
    ],
    "requiredRawData": []
  }
}
