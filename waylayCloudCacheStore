{
  "name": "waylayCloudCacheStore",
  "version": "1.3.0",
  "type": "actuator",
  "script": "var username =  options.globalSettings.API_KEY;\nvar password = options.globalSettings.API_PASS;\nvar domain = options.requiredProperties.domain;\nvar payload = options.requiredProperties.payload;\nvar forward = options.requiredProperties.forward;\nvar msg;\nvar resource; \n\nif(forward !== undefined && (forward === \"true\" || forward === \"TRUE\" || forward === \"True\"))\n    forward = true;\nelse\n    forward = false;\n\nqs = { forward: forward }\n\nvar storeMessage = function(msg){\n    var deferred = Q.defer();\n    console.log(\"storing message \" + JSON.stringify(msg));\n    var url = \"https://data.waylay.io/resources/\"+ resource +\"?domain=\"+domain;\n    var options = {\n        url: url,\n        json: msg,\n        qs: qs,\n        auth: {\n            user: username,\n            pass: password,\n            sendImmediately: true\n        }\n    };\n    console.log(\"posting \"+ JSON.stringify(msg) + \", to \" + resource);\n    request.post(options, function(error, response, body) {\n        if (!error && response.statusCode == 200) {\n            console.log(\"message stored \" + JSON.stringify(msg));\n            deferred.resolve(response);\n        } else{\n            console.log(\"message rejected \" + error);\n            deferred.reject(error);\n        }\n    });\n    return deferred.promise;\n}\n\n\ntry{\n    resource = waylayUtil.getRawData(options, options.requiredProperties.resource);\n} catch(err){\n    resource = options.requiredProperties.resource || waylayUtil.getResource(options);    \n}\nif(resource === '$')\n  resource = options.node.NAME\n\nif(resource === undefined || resource === \"\"){\n    send(new Error(\"resource not defined\"))\n} else {\n    if(domain){\n        if(payload){\n            try{\n               msg = waylayUtil.evaluateData(options, payload);    \n               if (typeof msg === 'string') {\n                   console.log(\"trying to parse to JSON\");\n                    msg = JSON.parse(msg);\n                }\n                console.log(\"Parsed using eval\");\n                console.log(msg);\n            } catch(err){\n                console.log(\"eval failed with \" + err);\n                console.log(\"trying using raw data\");\n                try {\n                    msg = waylayUtil.getRawData(options, payload);\n                } catch(err){\n                    console.log(\"raw data failed with \" + err);\n                }\n            } \n        } else {\n            try {\n                msg = waylayUtil.getRawData(options, options.node.NAME);\n            } catch(err){\n                console.log(\"trying raw data failed for: \" + options.node.NAME);\n            }\n        }\n        if(msg !== undefined || (Array.isArray(msg) && msg.length !== 0)){\n            if(!Array.isArray(msg)){\n                msg = [msg];\n            }\n            var promises = msg.map(function(q) {\n                return storeMessage(q);\n            });\n            console.log(\"sending..\");\n            Q.all(promises).then(function(){\n                console.log(\"DONE\"); \n                send();\n            }).fail(function(err){\n                send(new Error(\"Sending to bridge failed: \" + err));\n            });\n        } else{\n            send(new Error(\"Missing properties: [msg]\"));\n        }\n    } else{\n        send(new Error(\"Missing properties: [domain ]\"));\n    }\n}\n\n\n\n\n\n\n",
  "metadata": {
    "author": "",
    "category": "Waylay",
    "description": "waylayCloudCacheStore will store the payload in the the waylay cloud cache using the broker.\n\nActuator will post a payload using the resource as the identifier.\nInput parameters are:\n<ul>\n<li>domain (must be provided)</li>\n<li>resource, if not provided it will use as the resouece the node's resource name OR the name of the node</li>\n<li>payload (must be provided), which will be pre-processed with  waylayUtil.evaluateData or if not provided, will use the raw data of the item</li>\n<li>forward (should the message be forward or only stored, default is false</li>\n</ul>\n\nNote that the broker <strong>will not only store the data, but will also forward (back) the resource and the payload as the stream data to the platform. </strong>\nThat way you can for instance use pull sensor to inject data to all other tasks via the stream data interface. \nFor more info, please check the documentation on the waylay broker and cloud cache.\n\n\n",
    "documentationURL": "",
    "iconURL": "https://raw.githubusercontent.com/waylayio/documentation/master/icons/persisted_cache.png",
    "supportedStates": [],
    "requiredProperties": [
      "domain",
      "resource",
      "payload",
      "forward"
    ],
    "requiredRawData": []
  }
}
