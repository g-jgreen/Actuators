{
  "name": "netatmoThermostatActuator",
  "version": "0.0.3",
  "type": "actuator",
  "script": "var props = options.requiredProperties;\n\nvar clientId = options.globalSettings.DASHBOARD_KEY;\nvar clientSecret = options.globalSettings.DASHBOARD_SECRET;\nvar dashboardDomain = options.globalSettings.DASHBOARD_DOMAIN;\n\nvar tokenFromCache = waylayUtil.getCacheData(options, \"token\");\nvar therm_id = props.therm_id;\nvar relay_id = props.relay_id;\nvar setpoint_mode = props.setpoint_mode;\nvar setpoint_temp = props.setpoint_temp;\nvar setpoint_endtime = props.setpoint_endtime;\nvar profile = props.profile || waylayUtil.getResource(options);\n\nif(setpoint_mode === \"manual\" && setpoint_endtime === undefined){\n    //change to default setting of 1 hour\n    setpoint_endtime = new Date().getTime()/1000 + 3600;\n}\nif(setpoint_endtime !== undefined && isNaN(setpoint_endtime)){\n    var str = setpoint_endtime.trim();\n    if(str.split(\" \").length > 1 && !isNaN(str.split(\" \")[0]) && isNaN(str.split(\" \")[1])){\n        var t = parseFloat(str.split(\" \")[0]);\n        var tt = str.split(\" \")[1];\n        if(tt.indexOf(\"day\") > -1)\n            setpoint_endtime = new Date().getTime()/1000 + t * 24 * 2600;\n        if(tt.indexOf(\"hour\") > -1)\n            setpoint_endtime = new Date().getTime()/1000 + t * 2600;\n    } else {\n       setpoint_endtime = new Date().getTime()/1000 + 3600; \n    }\n}\n\nvar getToken = function(callback){\n  var options = {\n      url: \"https://\"+dashboardDomain+\"/api/token/netatmo/\" + profile,\n       auth: {\n        user: clientId,\n        password: clientSecret\n      }\n  };\n  \n  try {\n      request(options, function(error, response, body) {\n      if (!error && response.statusCode == 200) {\n          var bodyJson = JSON.parse(body);\n          console.info(bodyJson);\n          callback(null, bodyJson);\n      }else{\n          callback(new Error(\"Calling netatmo api failed: \" + error + \" \" + body + options.url));\n      }\n    });\n  } catch(err){\n       callback(new Error(\"Calling netatmo api failed: \" + err));\n  }\n}\n\n\nvar setState = function(token) {\n    var url = \"https://api.netatmo.com/api/setthermpoint\";\n    var options = {\n        url: url,\n        qs :{\n            access_token: token,\n            module_id: therm_id,\n            device_id: relay_id\n        }\n    }\n    if(setpoint_mode)\n        options.qs.setpoint_mode = setpoint_mode;\n    if(setpoint_temp)\n        options.qs.setpoint_temp = setpoint_temp;\n    if(setpoint_endtime)\n        options.qs.setpoint_endtime = setpoint_endtime;\n    console.log(options)\n    request(options, function(err, response, body) {\n       if (!err && response.statusCode == 200) {\n            console.log(body)\n            send();\n       } else{\n           console.log(response)\n           send(new Error(response.statusCode));\n       }\n    });\n};\n  \nvar setDeviceData = function(token){\n  console.log(token);\n  if(token.accessToken !== undefined){\n    setState(token.accessToken);\n  } else{\n    send(new Error(\"Token for profile \"+ profile + \" not valid\"));  \n    }\n}\n\nif(clientId !== undefined && clientSecret !== undefined && dashboardDomain !== undefined){\n  getToken(function(err, token){\n    if(err){\n      //send(err);\n      //try with the old token\n      if(tokenFromCache !== undefined){\n          console.log(\"try with an old token, since the request to the dashboard failed\");\n          setDeviceData({accessToken: tokenFromCache});\n      }else {\n          console.log(err.stack)\n          send(new Error(err));\n      }\n    }else{\n      setDeviceData(token);\n    }\n  });\n}else{\n    send(new Error(\"Missing properties\"));\n}\n",
  "metadata": {
    "author": "",
    "category": "Experimental",
    "description": "",
    "documentationURL": "https://dev.netatmo.com/doc/methods/setthermpoint",
    "iconURL": "https://raw.githubusercontent.com/waylayio/documentation/master/icons/netatmo-thermostat.png",
    "supportedStates": [],
    "requiredProperties": [
      "therm_id",
      "relay_id",
      "setpoint_mode",
      "profile",
      "setpoint_endtime",
      "setpoint_temp"
    ],
    "requiredRawData": []
  }
}
